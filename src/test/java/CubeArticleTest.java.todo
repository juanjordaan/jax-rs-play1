import java.io.File;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.junit.InSequence;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.resolver.api.maven.Maven;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.rtmdn.exam.wsd.cubearticle.Bean;
import com.rtmdn.exam.wsd.cubearticle.Beans;
import com.rtmdn.exam.wsd.cubearticle.ComponentScan;
import com.rtmdn.exam.wsd.cubearticle.Resources;

@RunWith( Arquillian.class )
public class CubeArticleTest
{
	private Client client;
	
	@ArquillianResource
	private URL deploymentURL;
	
	@Deployment( testable = false )
	public static WebArchive createDeployment( )
	{
		WebArchive war = ShrinkWrap.create ( WebArchive.class, "test.war" );
		war.addPackages ( true, "com.rtmdn.jpa" );
		war.addPackages ( true, "com.rtmdn.exam.wsd" );

		war.addAsResource ( "META-INF/beans.xml", "META-INF/beans.xml" );
		war.addAsResource ( "META-INF/test-persistence.xml", "META-INF/persistence.xml" );
		war.addAsResource ( "META-INF/drop.ddl", "META-INF/drop.ddl" );
		war.addAsResource ( "META-INF/create.ddl", "META-INF/create.ddl" );
		war.addAsResource ( "META-INF/load.ddl", "META-INF/load.ddl" );

		war.addAsWebInfResource ( "jbossas-ds.xml", "jbossas-ds.xml" );

		war.addAsWebInfResource ( "hornetq-jms.xml", "hornetq-jms.xml" );

		war.addAsLibraries ( Maven.resolver ( ).loadPomFromFile ( "pom.xml" ).resolve ( "org.codehaus.jackson:jackson-mapper-asl" ).withoutTransitivity ( ).asSingleFile ( ) );

		System.out.println ( war.toString ( true ) );

		return war;
	}

	@Before
	public void setup( ) throws MalformedURLException, URISyntaxException
	{
		System.out.println ( "deploymentURL = " + deploymentURL );

		client = ClientBuilder.newClient ( );
	}

	@After
	public void after( )
	{
		client.close ( );
	}

	@Test
	@InSequence( 1 )
	public void test1( ) throws JAXBException
	{
		System.out.println ( "\n --- test1( )" );
		
		File xml = new File("config.xml");

      Beans beans = new Beans();
      Bean bean = new Bean();
      bean.setId("viewResolver");
      bean.setClassName("org.springframework.web.servlet.view.InternalResourceViewResolver");        
      Resources resources = new Resources();
      resources.setMapping("/resources/**");
      resources.setLocation("/resources/");        
      ComponentScan componentScan = new ComponentScan();
      componentScan.setBasePackage("examples");        
      beans.setBean(bean);
      beans.setResources(resources);
      beans.setComponentScan(componentScan);
      
      JAXBContext contx = JAXBContext.newInstance(Beans.class);
      Marshaller marshaller = contx.createMarshaller();
      
      marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, 
              "http://www.springframework.org/schema/mvc " + 
              "http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd " +
              "http://www.springframework.org/schema/beans " +
              "http://www.springframework.org/schema/beans/spring-beans.xsd " +
              "http://www.springframework.org/schema/context " +
              "http://www.springframework.org/schema/context/spring-context-4.0.xsd");
      
      marshaller.setProperty( Marshaller.JAXB_FORMATTED_OUTPUT, true );  //Pretty Print the xml
      marshaller.marshal(beans, xml);
  }
}
