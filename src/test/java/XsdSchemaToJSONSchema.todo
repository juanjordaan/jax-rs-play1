import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;

import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;

//Deprecated
//import com.fasterxml.jackson.databind.jsonschema.JsonSchema;

import com.fasterxml.jackson.module.jsonSchema.JsonSchema;

import static java.lang.System.out;
import static java.lang.System.err;

public class XsdSchemaToJSONSchema
{
	private ObjectMapper createJaxbObjectMapper( )
	{
		final ObjectMapper mapper = new ObjectMapper( );
		final TypeFactory typeFactory = TypeFactory.defaultInstance( );
		final AnnotationIntrospector introspector = new JaxbAnnotationIntrospector( typeFactory );
		// make deserializer use JAXB annotations (only)  
		mapper.getDeserializationConfig( ).with( introspector );
		// make serializer use JAXB annotations (only)  
		mapper.getSerializationConfig( ).with( introspector );
		return mapper;
	}

	public void writeToStandardOutputWithModuleJsonSchema( )
	{
		final SchemaFactoryWrapper visitor = new SchemaFactoryWrapper( );
		final ObjectMapper mapper = new ObjectMapper( );

		try
		{
			mapper.acceptJsonFormatVisitor( mapper.constructType( Class.forName( fullyQualifiedClassName ) ), visitor );
			final JsonSchema jsonSchema = visitor.finalSchema( );
			out.println( mapper.writerWithDefaultPrettyPrinter( ).writeValueAsString( jsonSchema ) );
		}
		catch ( ClassNotFoundException cnfEx )
		{
			err.println( "Unable to find class " + fullyQualifiedClassName );
		}
		catch ( JsonMappingException jsonEx )
		{
			err.println( "Unable to map JSON: " + jsonEx );
		}
		catch ( JsonProcessingException jsonEx )
		{
			err.println( "Unable to process JSON: " + jsonEx );
		}
	}
}
